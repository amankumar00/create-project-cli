let arg,inquirer,createProject;_8a4‍.x([["cli",()=>cli]]);_8a4‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_8a4‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_8a4‍.w("./main.js",[["createProject",["createProject"],function(v){createProject=v}]]);


function parseArgumentsIntoOption(rawArgs){
    const args = arg(
        {
            '--git': Boolean,
            '--yes': Boolean,
            '--install': Boolean,
            '-g':'--git',
            '-y': '--yes',
            '-i':'--install'
        },
        {
            argv : rawArgs.slice(2),
        }
    );

    return{
        skipPrompts : args['--yes'] || false,
        git : args['--git']||false,
        template: args._[0],
        runInstall: args['--install']||false,
    };
}
async function promptForMissingOptions(options){
    const defaultTemplate = 'Javascript';
    if(options.skipPrompts){
        return{
            ... options,
            template: options.template|| defaultTemplate,
        }
        
    }
    
    const questions = [];

    if(!options.template){
        questions.push({
            type: 'list',
            name:'template',
            message: 'Please chosse which Project template to use',
            choices : ['JavaScript', 'TypeScript'],
            default: defaultTemplate,
        });
    }
    if(!options.git){
        questions.push({
            type: 'confirm',
            name:'git',
            message: 'Initialize a git repository',
            default: false,
        });
    }
    const answers = await inquirer.prompt(questions);
    return {
        ... options,
        template: options.template || answers.template,
        git : options.git || answers.git,
    };
}
       async function cli(args){
    let options = parseArgumentsIntoOption(args);
    options = await promptForMissingOptions(options);
    await createProject(options);
}