let fs,ncp,path,promisify,fileURLToPath,projectInstall,Listr;_8c6‍.x([["createProject",()=>createProject]]);_8c6‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_8c6‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_8c6‍.w("path",[["default",["path"],function(v){path=v}]]);_8c6‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_8c6‍.w("url",[["fileURLToPath",["fileURLToPath"],function(v){fileURLToPath=v}]]);_8c6‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);_8c6‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);// import chalk from "chalk";





// import {execa} from 'execa';


const access = promisify(fs.access);
const copy = promisify(ncp);
const chalk = require('chalk');
const execa = require('execa');
async function copyTemplateFiles(options) {
    return copy(options.templateDirectory, options.targetDirectory,{
        clobber: false,
    });
}

async function initGit(options){
    const result =  await execa('git', ['init'], {
        cwd: options.targetDirectory,
    });
    if(result.failed){
        return Promise.reject(new Error('Failed to initialize Git'));
    }
    return;
}
       async function createProject(options){
    options = {
        ...options,
        targetDirectory : options.targetDirectory || process.cwd(),
    };
    const currentFileUrl = _8c6‍._.meta.url;
    const templateDir = path.resolve(
        fileURLToPath(_8c6‍._.meta.url),
        '../../templates',
        options.template.toLowerCase()
    );

    options.templateDirectory = templateDir;
try{
    await access(templateDir, fs.constants.R_OK);
}
catch(e){
    _8c6‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
    process.exit(1);
}
const tasks = new Listr([
    {
        title : 'Copy Project Files',
        task : () => copyTemplateFiles(options),
    },
    {
        title: 'Initialize Git',
        task : () => initGit(options),
        enabled : () => options.git,
    },
    {
        title: 'Install dependencies',
        task: ()=>  projectInstall({
             cwd: options.targetDirectory,
        }),
        skip:()=> !options.runInstall? 'Pass --install to automatically install' : undefined,
    },
]);
await tasks.run();
await copyTemplateFiles(options);
_8c6‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
return true;
}